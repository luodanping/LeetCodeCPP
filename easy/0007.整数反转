题目：
给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。

示例 1:
输入: 123
输出: 321

示例 2:
输入: -123
输出: -321

示例 3:
输入: 120
输出: 21

注意:
假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。

链接：https://leetcode-cn.com/problems/reverse-integer

思路：暴力方法
１．　首先判断正负，记录其符号
２．　拆成一位一位，存储其每一位
３．　将每一位的数字反转
４．　合成新的反转后的数字

代码：
class Solution {
public:
    int reverse(int x) {
        //-2147483648 -> 214748364-1
        //unsigned 0->214748364*2 -1　注意范围
        int flag_sign=1;//1为正,-1为负
        unsigned int ret=0;//正整数
        if(x<0)//记录符号
        {
            flag_sign=-1;
            if(x==-1*std::pow(2,31))
            {
                ret=std::pow(2,31);
            }
            else
            {
                ret=std::abs(x);
            }   
        }
        else
        {
            ret=x;
        }
        std::vector<unsigned int> vec;
        if(ret==0)//==0的情况
        {
            vec.push_back(0);
        }
        while(ret)//存储每一位数据
        {
            vec.push_back(ret%10);
            ret/=10;
        }
        ret=0;
        if(vec[0]>2 && vec.size()>9){return 0;}//会超过unsigned的范围
        for(int i=0; i<vec.size(); i++)//组成新的数
        {
            //std::cout<<i<<"|"<<vec[i]<<"|";
            ret+=vec[i]*std::pow(10,vec.size()-i-1);
            //std:cout<<ret<<"|";
            if(ret>std::pow(2,31) || (ret==std::pow(2,31) && flag_sign==1)){return 0;}//处理溢出
        }
        
        int result=int(ret);
        result = result*flag_sign;
        return result;
    }
};
